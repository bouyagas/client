{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/mohamedbgassama/code/knowledgeHouse/projects/alumni_network-alt/lib/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// @ts-nocheck\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nvar globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n              // @ts-ignore\n\n              apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 24;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 71\n                },\n                __self: this\n              })));\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 23:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 24:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[11, 20]]);\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://alumninetwork.herokuapp.com/',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: fetch,\n      request: function request(operation) {\n        var token;\n        return _regeneratorRuntime.async(function request$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Get JWT token from local storage\n                token = window.localStorage.getItem('token'); // Pass token to headers\n\n                operation.setContext({\n                  headers: {\n                    Authorization: token ? \"Bearer \".concat(token) : ''\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        });\n      }\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/mohamedbgassama/code/knowledgeHouse/projects/alumni_network-alt/lib/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","request","operation","token","window","localStorage","getItem","setContext","headers","Authorization","restore"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\n\nlet globalApolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      // @ts-ignore\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://alumninetwork.herokuapp.com/', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      fetch,\n      request: async operation => {\n        // Get JWT token from local storage\n        const token = window.localStorage.getItem('token');\n\n        // Pass token to headers\n        operation.setContext({\n          headers: {\n            Authorization: token ? `Bearer ${token}` : ''\n          }\n        });\n      }\n    }),\n\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}